buildscript {
	repositories {
		mavenLocal()
		maven { url ossimlabsMavenUrl }
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath "org.grails.plugins:hibernate5:${ gormVersion - ".RELEASE" }"
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${ assetPipelineVersion }"
	}
}

plugins {
	id "com.github.ben-manes.versions" version "0.20.0"
}

subprojects { project ->
	
	version projectVersion
	group projectGroup
	
	boolean isGrailsApp = project.name.endsWith( '-app' )
	boolean isGrailsPlugin = project.name.endsWith( '-plugin' )
	boolean isGrailsProject = isGrailsApp || isGrailsPlugin
	
	apply plugin: "eclipse"
	apply plugin: "idea"

	afterEvaluate {
		project.apply plugin: 'maven-publish'

		project.publish.dependsOn assemble
		project.publishToMavenLocal.dependsOn assemble

		project.publishing {
			repositories {
				maven {
					url = repositoryManagerUrl
					credentials {
						username System.getenv( 'REPOSITORY_MANAGER_USERNAME' )
						password System.getenv( 'REPOSITORY_MANAGER_PASSWORD' )
					}
				}
			}
			publications {
				mavenJava(MavenPublication) {
					from components.java
				}
			}			
		}
	}
	
	if ( isGrailsProject )
	{
		if ( isGrailsApp )
		{
			apply plugin: "org.grails.grails-web"
		}
		else if ( isGrailsPlugin )
		{
			apply plugin: "org.grails.grails-plugin"
			apply plugin: "org.grails.grails-plugin-publish"
		}
		
		apply plugin: "asset-pipeline"
		apply plugin: "org.grails.grails-gsp"
		
		repositories {
			mavenLocal()
			maven { url ossimlabsMavenUrl }
			maven { url "https://repo.grails.org/grails/core" }
		}

		dependencyManagement {
			imports {
				mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
			}
		}

		dependencies {
			compile "org.springframework.boot:spring-boot-starter-logging"
			compile "org.springframework.boot:spring-boot-autoconfigure"
			compile "org.grails:grails-core"
			compile "org.springframework.boot:spring-boot-starter-actuator"
			compile "org.springframework.boot:spring-boot-starter-tomcat"
			compile "org.grails:grails-web-boot"
			compile "org.grails:grails-logging"
			compile "org.grails:grails-plugin-rest"
			compile "org.grails:grails-plugin-databinding"
			compile "org.grails:grails-plugin-i18n"
			compile "org.grails:grails-plugin-services"
			compile "org.grails:grails-plugin-url-mappings"
			compile "org.grails:grails-plugin-interceptors"
			compile "org.grails.plugins:cache"
			compile "org.grails.plugins:async"
			compile "org.grails.plugins:scaffolding"
			compile "org.grails.plugins:gsp"
			console "org.grails:grails-console"
			
			if ( isGrailsApp )
			{
				compile "org.grails.plugins:events"
				compile "org.grails.plugins:hibernate5"
				compile "org.hibernate:hibernate-core:${ hibernateCoreVersion }"
				profile "org.grails.profiles:web"
				runtime "org.glassfish.web:el-impl:${ glassfishVersion }"
				runtime "com.h2database:h2"
				runtime "org.apache.tomcat:tomcat-jdbc"

				compile "org.springframework.cloud:spring-cloud-starter-config"
				compile "org.springframework.cloud:spring-cloud-starter-eureka"
			}
			else if ( isGrailsPlugin )
			{
				profile "org.grails.profiles:web-plugin"
				provided "org.grails:grails-plugin-services"
				provided "org.grails:grails-plugin-domain-class"
				testCompile "org.grails:grails-plugin-testing"
			}
			
			runtime "com.bertramlabs.plugins:asset-pipeline-grails:${ assetPipelineVersion }"
			
			testCompile "org.grails:grails-gorm-testing-support"
			testCompile "org.grails.plugins:geb"
			testCompile "org.grails:grails-web-testing-support"
			testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:${ seleniumDriverVersion }"
			testRuntime "net.sourceforge.htmlunit:htmlunit:${ htmlUnitVersion }"
		}
		
		bootRun {
			jvmArgs( '-Dspring.output.ansi.enabled=always' )
			addResources = true
			String springProfilesActive = 'spring.profiles.active'
			systemProperty springProfilesActive, System.getProperty( springProfilesActive )
		}
		
		if ( isGrailsPlugin )
		{
			// enable if you wish to package this plugin as a standalone application
			bootRepackage.enabled = false
			grailsPublish {
				// TODO: Provide values here
				user = 'user'
				key = 'key'
				githubSlug = 'foo/bar'
				license {
					name = 'Apache-2.0'
				}
				title = "My Plugin"
				desc = "Full plugin description"
				developers = [ johndoe: "John Doe" ]
			}
		}
		
		assets {
			if ( isGrailsApp )
			{
				minifyJs = true
				minifyCss = true
			}
			else if ( isGrailsPlugin )
			{
				packagePlugin = true
			}
		}
	}
}

